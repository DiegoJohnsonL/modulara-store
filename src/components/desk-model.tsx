/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/desk.glb -t 
Author: Dr.Livsi (https://sketchfab.com/Dr.Livsi92)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/desk-with-shelf-43361d78f26e46698c09f7e2ec8499ae
Title: Desk with shelf
*/

import * as THREE from "three";
import React, { forwardRef, useImperativeHandle, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_10: THREE.Mesh;
    Object_12: THREE.Mesh;
    Object_14: THREE.Mesh;
    Object_16: THREE.Mesh;
    Object_18: THREE.Mesh;
    Object_20: THREE.Mesh;
    Object_22: THREE.Mesh;
    Object_24: THREE.Mesh;
    Object_26: THREE.Mesh;
    Object_28: THREE.Mesh;
    Object_30: THREE.Mesh;
    Object_6: THREE.Mesh;
  };
  materials: {
    Doormaterial: THREE.MeshStandardMaterial;
    Handlesmaterial: THREE.MeshStandardMaterial;
    Shelf1material: THREE.MeshStandardMaterial;
    Shelf2material: THREE.MeshStandardMaterial;
    Shelfmaterial: THREE.MeshStandardMaterial;
    Shelf4material: THREE.MeshStandardMaterial;
    Shelf5material: THREE.MeshStandardMaterial;
    LongShelfmaterial: THREE.MeshStandardMaterial;
    Corpusmaterial: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "Animation";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>>;

export interface ModelRef {
  playAnimation: (actionName: ActionName) => void;
  stopAnimation: (actionName: ActionName) => void;
}

export const DeskModel = forwardRef((props: JSX.IntrinsicElements["group"], ref) => {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF("/desk.glb") as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useImperativeHandle(ref, () => ({
    playAnimation: (actionName: ActionName) => {
      actions[actionName]?.play();
    },
    stopAnimation: (actionName: ActionName) => {
      actions[actionName]?.reset().stop();
    },
  }));

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Door_0" position={[-0.502, 1.469, -1.809]}>
                <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.Doormaterial} />
              </group>
              <group name="Handles_2" position={[-0.502, 1.469, -1.809]}>
                <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Shelf1_7" position={[0.323, 0.654, -1.507]}>
                <mesh name="Object_10" geometry={nodes.Object_10.geometry} material={materials.Shelf1material} />
              </group>
              <group name="Shelf2_8" position={[0.323, 0.512, -1.507]}>
                <mesh name="Object_12" geometry={nodes.Object_12.geometry} material={materials.Shelf2material} />
              </group>
              <group name="Shelf3_9" position={[0.323, 0.37, -1.507]}>
                <mesh name="Object_14" geometry={nodes.Object_14.geometry} material={materials.Shelfmaterial} />
              </group>
              <group name="Shelf4_10" position={[0.323, 0.23, -1.507]}>
                <mesh name="Object_16" geometry={nodes.Object_16.geometry} material={materials.Shelf4material} />
              </group>
              <group name="Shelf5_11" position={[0.323, 0.089, -1.507]}>
                <mesh name="Object_18" geometry={nodes.Object_18.geometry} material={materials.Shelf5material} />
              </group>
              <group name="LongShelf_12" position={[-0.177, 0.673, -1.504]}>
                <mesh name="Object_20" geometry={nodes.Object_20.geometry} material={materials.LongShelfmaterial} />
              </group>
              <group name="Handle1_13" position={[0.323, 0.654, -1.507]}>
                <mesh name="Object_22" geometry={nodes.Object_22.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Handle2_14" position={[0.323, 0.556, -1.488]}>
                <mesh name="Object_24" geometry={nodes.Object_24.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Handle3_15" position={[0.323, 0.37, -1.507]}>
                <mesh name="Object_26" geometry={nodes.Object_26.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Handle4_16" position={[0.323, 0.23, -1.507]}>
                <mesh name="Object_28" geometry={nodes.Object_28.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Handle5_17" position={[0.323, 0.089, -1.507]}>
                <mesh name="Object_30" geometry={nodes.Object_30.geometry} material={materials.Handlesmaterial} />
              </group>
              <group name="Corpus_1" position={[0, 0.734, -1.776]}>
                <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={materials.Corpusmaterial} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
});

useGLTF.preload("/desk.glb");
